# -*- coding: utf-8 -*-
"""Final Car_LSTM_CAPSTONE_Guide GenuineZ.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19dXqCUZjVIddj_6pU3KeTuoeStGkv12l
"""

#Reference https://www.kaggle.com/kredy10/simple-lstm-for-text-classification

"""FIne tune model
Transfer learning for positive review prediction. Pre-trained model. Transfer learning NLP. 
"""

# Commented out IPython magic to ensure Python compatibility.
#my imports
import numpy as np
import unicodedata
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.tokenize import sent_tokenize
import string
from nltk import pos_tag
import pandas as pd
from nltk import pos_tag
from sklearn.feature_extraction.text import TfidfVectorizer
pd.set_option('display.max_colwidth', -1)
from sklearn.feature_selection import chi2
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.metrics import f1_score
from sklearn.metrics import recall_score
import matplotlib.pyplot as plt
from sklearn.metrics import precision_score
pd.set_option("display.max_rows", None, "display.max_columns", None)
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('averaged_perceptron_tagger')
import random
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from keras.models import Model
from keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding
from keras.optimizers import RMSprop
from keras.preprocessing.text import Tokenizer
from keras.preprocessing import sequence
from keras.utils import to_categorical
from keras.callbacks import EarlyStopping
# %matplotlib inline
import csv
import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, LSTM, Dropout, Activation, Embedding, Bidirectional
nltk.download('stopwords')
from nltk.corpus import stopwords
STOPWORDS = set(stopwords.words('english'))

#Github Links 
#Test Data
negative_car_test = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/negative_car_test.csv')
positive_car_test = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/positive_car_test.csv')
total_car_test = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/total_car_test-2.csv')
#Minimum Data
negative_car_minimum = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/negative_car_minimum.csv')
positive_car_minimum = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/positive_car_minimum.csv')
total_car_minimum = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/total_car_minimum.csv')
#Remainder Data
negative_car_remainder = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/negative_car_remainder.csv')
positive_car_remainder = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/positive_car_remainder.csv')
total_car_remainder = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/total_car_remainder.csv')
#Total Training Data
master_negative_car_training = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/master_negative_car_training_final.csv')
master_positive_car_training = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/master_positive_car_training_final.csv')
total_master_training_final = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/total_master_training_final.csv')

#Assigning Negative/Positive to copy
negative_car_text = master_negative_car_training.copy()
positive_car_text = master_positive_car_training.copy()

neg_car_synthetic_df = pd.read_csv("https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/capstone_synthetic_neg_car.csv")

pos_car_synthetic_df = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/capstone_synthetic_pos_car.csv')

#Shuffling dataframe
neg_car_synthetic_df = neg_car_synthetic_df.sample(frac=1).reset_index(drop=True)
pos_car_synthetic_df = pos_car_synthetic_df.sample(frac=1).reset_index(drop=True)

#Important Dataframes

#Test Data Set
total_car_test = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/total_car_test-2.csv')
total_car_test.drop("Unnamed: 0", axis=1,inplace=True)


#Genuine Data Set Full
total_master_training_final = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/total_master_training_final.csv')

#Minimum Data Set
total_car_minimum = pd.read_csv('https://raw.githubusercontent.com/success81/Synthetic_NLP_Data_Generation_Paper/main/Car_repair/total_car_minimum.csv')

#Total Genuine and Synthetic Shuffled Dataset Capstone
capstone_final_synth_and_gen_total = pd.concat([neg_car_synthetic_df, pos_car_synthetic_df, total_master_training_final], axis=0).reset_index(drop=True)
capstone_final_synth_and_gen_total.drop("Unnamed: 0", axis=1,inplace=True)

new_x_train, new_x_test, new_y_train, new_y_test = train_test_split(total_car_test['text'], total_car_test['rating'], random_state = 0, test_size = .99)



capstone_final_synth_and_gen_total.head(1)

lstm.head(1)

#Making LSTM Dataframe
lstm = capstone_final_synth_and_gen_total.copy()

#ignore
#lstm.drop(["stars"], axis = 1, inplace= True)

#Graphic of reviews
sns.countplot(lstm["rating"])
plt.xlabel('Label')
plt.title('Positive and negative reviews')

# check for missing values
display(capstone_final_synth_and_gen_total.isna().any())
 
# drop any missing values
capstone_final_synth_and_gen_total = capstone_final_synth_and_gen_total.dropna()

 
# drop any missing values
total_master_training_final = total_master_training_final.dropna()
 
# make sure they've all been removed.
total_master_training_final.isna().any()

#encoding y in main dataset
y = total_master_training_final.rating
x = total_master_training_final.text
le = LabelEncoder()
y = le.fit_transform(y)
y = y.reshape(-1,1)

#encoding y in test set
lstm_y_test = le.fit_transform(new_y_test)
lstm_y_test = lstm_y_test.reshape(-1,1)

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.15)

#paramaters
max_words = 1000
max_len = 150
tok = Tokenizer(num_words=max_words)
tok.fit_on_texts(x_train)

#Padding
x_sequences = tok.texts_to_sequences(x_train)
x_sequences_matrix = sequence.pad_sequences(x_sequences,maxlen=max_len)

#Setting RNN
def RNN():
    inputs = Input(name='inputs',shape=[max_len])
    layer = Embedding(max_words,50,input_length=max_len)(inputs)
    layer = LSTM(64)(layer)
    layer = Dense(256,name='FC1')(layer)
    layer = Activation('relu')(layer)
    layer = Dropout(0.5)(layer)
    layer = Dense(1,name='out_layer')(layer)
    layer = Activation('sigmoid')(layer)
    model = Model(inputs=inputs,outputs=layer)
    return model

#RNN
model = RNN()
model.summary()
model.compile(loss='binary_crossentropy',optimizer=RMSprop(),metrics=['accuracy'])

#Fitting LSTM Model
model.fit(x_sequences_matrix,y_train,batch_size=128,epochs=10,
          validation_split=0.2,callbacks=[EarlyStopping(monitor='val_loss',min_delta=0.0001)])

#Sequence Matrixing test set
test_sequences = tok.texts_to_sequences(new_x_test)
test_sequences_matrix = sequence.pad_sequences(test_sequences,maxlen=max_len)

#accuracy testing
accr = model.evaluate(test_sequences_matrix,lstm_y_test)

